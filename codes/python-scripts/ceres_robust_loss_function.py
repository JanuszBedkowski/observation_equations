from sympy import *

s,a,b = symbols('s a b')
all_symbols = [s]

TrivialLoss = Matrix([s]).vec()
TrivialLoss_first_derivative = TrivialLoss.jacobian(all_symbols)
TrivialLoss_second_derivative = TrivialLoss_first_derivative.jacobian(all_symbols)
print("TrivialLoss")
print(latex(TrivialLoss))
print("TrivialLoss_first_derivative")
print(latex(TrivialLoss_first_derivative))
print("TrivialLoss_second_derivative")
print(latex(TrivialLoss_second_derivative))

HuberLoss = Matrix([s,2*sqrt(s)-1]).vec()
HuberLoss_first_derivative = HuberLoss.jacobian(all_symbols)
HuberLoss_second_derivative = HuberLoss_first_derivative.jacobian(all_symbols)
print("HuberLoss")
print(latex(HuberLoss))
print("HuberLoss_first_derivative")
print(latex(HuberLoss_first_derivative))
print("HuberLoss_second_derivative")
print(latex(HuberLoss_second_derivative))

SoftLOneLoss = Matrix([2*(sqrt(1+s)-1)]).vec()
SoftLOneLoss_first_derivative = SoftLOneLoss.jacobian(all_symbols)
SoftLOneLoss_second_derivative = SoftLOneLoss_first_derivative.jacobian(all_symbols)
print("SoftLOneLoss")
print(latex(SoftLOneLoss))
print("SoftLOneLoss_first_derivative")
print(latex(SoftLOneLoss_first_derivative))
print("SoftLOneLoss_second_derivative")
print(latex(SoftLOneLoss_second_derivative))

CauchyLoss = Matrix([log(1+s)]).vec()
CauchyLoss_first_derivative = CauchyLoss.jacobian(all_symbols)
CauchyLoss_second_derivative = CauchyLoss_first_derivative.jacobian(all_symbols)
print("CauchyLoss")
print(latex(CauchyLoss))
print("CauchyLoss_first_derivative")
print(latex(CauchyLoss_first_derivative))
print("CauchyLoss_second_derivative")
print(latex(CauchyLoss_second_derivative))

ArctanLoss = Matrix([atan(s)]).vec()
ArctanLoss_first_derivative = ArctanLoss.jacobian(all_symbols)
ArctanLoss_second_derivative = ArctanLoss_first_derivative.jacobian(all_symbols)
print("ArctanLoss")
print(latex(ArctanLoss))
print("ArctanLoss_first_derivative")
print(latex(ArctanLoss_first_derivative))
print("ArctanLoss_second_derivative")
print(latex(ArctanLoss_second_derivative))

TolerantLoss = Matrix([b*log(1+exp((s-a)/b))-b*log(1+exp(-a/b))]).vec()
TolerantLoss_first_derivative = TolerantLoss.jacobian(all_symbols)
TolerantLoss_second_derivative = TolerantLoss_first_derivative.jacobian(all_symbols)
print("TolerantLoss")
print(latex(TolerantLoss))
print("TolerantLoss_first_derivative")
print(latex(TolerantLoss_first_derivative))
print("TolerantLoss_second_derivative")
print(latex(TolerantLoss_second_derivative))

with open("ceres_robust_loss_function.h",'w') as f_cpp:  
    f_cpp.write("inline double trivial_loss(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(TrivialLoss[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double trivial_loss_first_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(TrivialLoss_first_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double trivial_loss_second_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(TrivialLoss_second_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    
    f_cpp.write("inline double huber_loss_less_1(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(HuberLoss[0,0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double huber_loss_less_1_first_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(HuberLoss_first_derivative[0,0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double huber_loss_less_1_second_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(HuberLoss_second_derivative[0,0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    
    f_cpp.write("inline double huber_loss_more_1(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(HuberLoss[1,0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double huber_loss_more_1_first_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(HuberLoss_first_derivative[1,0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double huber_loss_more_1_second_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(HuberLoss_second_derivative[1,0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    
    f_cpp.write("inline double soft_lone_loss(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(SoftLOneLoss[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double soft_lone_loss_first_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(SoftLOneLoss_first_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double soft_lone_loss_second_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(SoftLOneLoss_second_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")

    f_cpp.write("inline double cauchy_loss(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(CauchyLoss[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double cauchy_loss_first_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(CauchyLoss_first_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double cauchy_loss_second_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(CauchyLoss_second_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")

    f_cpp.write("inline double arctan_loss(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(ArctanLoss[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double arctan_loss_first_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(ArctanLoss_first_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double arctan_loss_second_derivative(double s)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(ArctanLoss_second_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")

    f_cpp.write("inline double tolerant_loss(double s, double a, double b)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(TolerantLoss[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double tolerant_loss_first_derivative(double s, double a, double b)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(TolerantLoss_first_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
    f_cpp.write("inline double tolerant_loss_second_derivative(double s, double a, double b)\n")
    f_cpp.write("{")
    f_cpp.write("return %s;\n"%(ccode(TolerantLoss_second_derivative[0])))
    f_cpp.write("}")    
    f_cpp.write("\n")
