#ifndef _point_to_point_source_to_target_tait_bryan_wc_jacobian_simplified_h_
#define _point_to_point_source_to_target_tait_bryan_wc_jacobian_simplified_h_
inline void point_to_point_source_to_target_tait_bryan_wc_simplified(double &delta_x, double &delta_y, double &delta_z, double tx, double ty, double tz, double om, double fi, double ka, double x_s, double y_s, double z_s, double x_t, double y_t, double z_t)
{
double sin_om = sin(om);
double cos_om = cos(om);
double sin_fi = sin(fi);
double cos_fi = cos(fi);
double sin_ka = sin(ka);
double cos_ka = cos(ka);
double x0 = cos_om*sin_ka;
double x1 = cos_ka*sin_om;
double x2 = cos_ka*cos_om;
double x3 = sin_ka*sin_om;
delta_x = -cos_fi*cos_ka*x_s + cos_fi*sin_ka*y_s - sin_fi*z_s - tx + x_t;
delta_y = cos_fi*sin_om*z_s - ty - x_s*(sin_fi*x1 + x0) - y_s*(-sin_fi*x3 + x2) + y_t;
delta_z = -cos_fi*cos_om*z_s - tz + x_s*(sin_fi*x2 - x3) - y_s*(sin_fi*x0 + x1) + z_t;
}
inline void point_to_point_source_to_target_tait_bryan_wc_jacobian_simplified(Eigen::Matrix<double, 3, 6, Eigen::RowMajor> &j, double tx, double ty, double tz, double om, double fi, double ka, double x_s, double y_s, double z_s)
{
double sin_om = sin(om);
double cos_om = cos(om);
double sin_fi = sin(fi);
double cos_fi = cos(fi);
double sin_ka = sin(ka);
double cos_ka = cos(ka);
double x0 = cos_fi*z_s;
double x1 = cos_ka*sin_om;
double x2 = cos_om*sin_ka;
double x3 = sin_fi*x2 + x1;
double x4 = sin_ka*sin_om;
double x5 = cos_ka*cos_om;
double x6 = sin_fi*x5 - x4;
double x7 = cos_fi*cos_ka*x_s - cos_fi*sin_ka*y_s + sin_fi*z_s;
double x8 = -sin_fi*x4 + x5;
double x9 = sin_fi*x1 + x2;
j.coeffRef(0,0) = -1;
j.coeffRef(0,1) = 0;
j.coeffRef(0,2) = 0;
j.coeffRef(0,3) = 0;
j.coeffRef(0,4) = cos_ka*sin_fi*x_s - sin_fi*sin_ka*y_s - x0;
j.coeffRef(0,5) = cos_fi*(cos_ka*y_s + sin_ka*x_s);
j.coeffRef(1,0) = 0;
j.coeffRef(1,1) = -1;
j.coeffRef(1,2) = 0;
j.coeffRef(1,3) = cos_om*x0 + x3*y_s - x6*x_s;
j.coeffRef(1,4) = -sin_om*x7;
j.coeffRef(1,5) = -x8*x_s + x9*y_s;
j.coeffRef(2,0) = 0;
j.coeffRef(2,1) = 0;
j.coeffRef(2,2) = -1;
j.coeffRef(2,3) = cos_fi*sin_om*z_s - x8*y_s - x9*x_s;
j.coeffRef(2,4) = cos_om*x7;
j.coeffRef(2,5) = -x3*x_s - x6*y_s;
}
inline void point_to_point_source_to_target_tait_bryan_wc_AtPA_simplified(Eigen::Matrix<double, 6, 6, Eigen::RowMajor> &AtPA, double tx, double ty, double tz, double om, double fi, double ka, double x_s, double y_s, double z_s, double p11, double p12, double p13, double p21, double p22, double p23, double p31, double p32, double p33)
{
double sin_om = sin(om);
double cos_om = cos(om);
double sin_fi = sin(fi);
double cos_fi = cos(fi);
double sin_ka = sin(ka);
double cos_ka = cos(ka);
double x0 = cos_ka*sin_om;
double x1 = cos_om*sin_ka;
double x2 = sin_fi*x1 + x0;
double x3 = sin_ka*sin_om;
double x4 = cos_ka*cos_om;
double x5 = sin_fi*x4 - x3;
double x6 = cos_fi*z_s;
double x7 = cos_om*x6 + x2*y_s - x5*x_s;
double x8 = sin_fi*x0 + x1;
double x9 = -sin_fi*x3 + x4;
double x10 = -sin_om*x6 + x8*x_s + x9*y_s;
double x11 = sin_ka*y_s;
double x12 = cos_ka*x_s;
double x13 = sin_fi*x11 - sin_fi*x12 + x6;
double x14 = p11*x13;
double x15 = -cos_fi*x11 + cos_fi*x12 + sin_fi*z_s;
double x16 = sin_om*x15;
double x17 = cos_om*x15;
double x18 = -x8*y_s + x9*x_s;
double x19 = x2*x_s + x5*y_s;
double x20 = cos_fi*(cos_ka*y_s + sin_ka*x_s);
double x21 = -p11*x20;
double x22 = p22*x7;
double x23 = p22*x16;
double x24 = p22*x18;
double x25 = -p33*x10;
double x26 = -p33*x17;
double x27 = p33*x19;
double x28 = -p32*x10 + x22;
double x29 = p23*x7 + x25;
double x30 = -x7;
double x31 = p21*x30 + p31*x10;
double x32 = p22*x30 + p32*x10;
double x33 = p23*x30 + p33*x10;
double x34 = p21*x16 - p31*x17 + x14;
double x35 = p12*x13 - p32*x17 + x23;
double x36 = p13*x13 + p23*x16 + x26;
double x37 = p21*x18 + p31*x19 + x21;
double x38 = -p12*x20 + p32*x19 + x24;
double x39 = -p13*x20 + p23*x18 + x27;
AtPA.coeffRef(0,0) = p11;
AtPA.coeffRef(0,1) = p12;
AtPA.coeffRef(0,2) = p13;
AtPA.coeffRef(0,3) = -p12*x7 + p13*x10;
AtPA.coeffRef(0,4) = p12*x16 - p13*x17 + x14;
AtPA.coeffRef(0,5) = p12*x18 + p13*x19 + x21;
AtPA.coeffRef(1,0) = p21;
AtPA.coeffRef(1,1) = p22;
AtPA.coeffRef(1,2) = p23;
AtPA.coeffRef(1,3) = p23*x10 - x22;
AtPA.coeffRef(1,4) = p21*x13 - p23*x17 + x23;
AtPA.coeffRef(1,5) = -p21*x20 + p23*x19 + x24;
AtPA.coeffRef(2,0) = p31;
AtPA.coeffRef(2,1) = p32;
AtPA.coeffRef(2,2) = p33;
AtPA.coeffRef(2,3) = -p32*x7 - x25;
AtPA.coeffRef(2,4) = p31*x13 + p32*x16 + x26;
AtPA.coeffRef(2,5) = -p31*x20 + p32*x18 + x27;
AtPA.coeffRef(3,0) = -p21*x7 + p31*x10;
AtPA.coeffRef(3,1) = -x28;
AtPA.coeffRef(3,2) = -x29;
AtPA.coeffRef(3,3) = -x10*x29 + x28*x7;
AtPA.coeffRef(3,4) = x13*x31 + x16*x32 - x17*x33;
AtPA.coeffRef(3,5) = x18*x32 + x19*x33 - x20*x31;
AtPA.coeffRef(4,0) = x34;
AtPA.coeffRef(4,1) = x35;
AtPA.coeffRef(4,2) = x36;
AtPA.coeffRef(4,3) = x10*x36 - x35*x7;
AtPA.coeffRef(4,4) = x13*x34 + x16*x35 - x17*x36;
AtPA.coeffRef(4,5) = x18*x35 + x19*x36 - x20*x34;
AtPA.coeffRef(5,0) = x37;
AtPA.coeffRef(5,1) = x38;
AtPA.coeffRef(5,2) = x39;
AtPA.coeffRef(5,3) = x10*x39 - x38*x7;
AtPA.coeffRef(5,4) = x13*x37 + x16*x38 - x17*x39;
AtPA.coeffRef(5,5) = x18*x38 + x19*x39 - x20*x37;
}
inline void point_to_point_source_to_target_tait_bryan_wc_AtPB_simplified(Eigen::Matrix<double, 6, 1> &AtPB, double tx, double ty, double tz, double om, double fi, double ka, double x_s, double y_s, double z_s, double p11, double p12, double p13, double p21, double p22, double p23, double p31, double p32, double p33, double x_t, double y_t, double z_t)
{
double sin_om = sin(om);
double cos_om = cos(om);
double sin_fi = sin(fi);
double cos_fi = cos(fi);
double sin_ka = sin(ka);
double cos_ka = cos(ka);
double x0 = cos_ka*x_s;
double x1 = sin_ka*y_s;
double x2 = cos_fi*x0 - cos_fi*x1 + sin_fi*z_s;
double x3 = tx + x2 - x_t;
double x4 = cos_om*sin_ka;
double x5 = cos_ka*sin_om;
double x6 = sin_fi*x5 + x4;
double x7 = cos_ka*cos_om;
double x8 = sin_ka*sin_om;
double x9 = -sin_fi*x8 + x7;
double x10 = cos_fi*z_s;
double x11 = -sin_om*x10 + x6*x_s + x9*y_s;
double x12 = ty + x11 - y_t;
double x13 = sin_fi*x4 + x5;
double x14 = sin_fi*x7 - x8;
double x15 = cos_om*x10 + x13*y_s - x14*x_s;
double x16 = tz + x15 - z_t;
double x17 = -x15;
double x18 = -sin_fi*x0 + sin_fi*x1 + x10;
double x19 = sin_om*x2;
double x20 = cos_om*x2;
double x21 = -x6*y_s + x9*x_s;
double x22 = x13*x_s + x14*y_s;
double x23 = cos_fi*(cos_ka*y_s + sin_ka*x_s);
AtPB.coeffRef(0) = p11*x3 + p12*x12 + p13*x16;
AtPB.coeffRef(1) = p21*x3 + p22*x12 + p23*x16;
AtPB.coeffRef(2) = p31*x3 + p32*x12 + p33*x16;
AtPB.coeffRef(3) = x12*(p22*x17 + p32*x11) + x16*(p23*x17 + p33*x11) + x3*(p21*x17 + p31*x11);
AtPB.coeffRef(4) = x12*(p12*x18 + p22*x19 - p32*x20) + x16*(p13*x18 + p23*x19 - p33*x20) + x3*(p11*x18 + p21*x19 - p31*x20);
AtPB.coeffRef(5) = x12*(-p12*x23 + p22*x21 + p32*x22) + x16*(-p13*x23 + p23*x21 + p33*x22) + x3*(-p11*x23 + p21*x21 + p31*x22);
}
#endif
