inline void point_to_point_vo_scale_rodrigues_wc(double &delta_x, double &delta_y, double &delta_z, double px_1, double py_1, double pz_1, double sx_1, double sy_1, double sz_1, double px_2, double py_2, double pz_2, double sx_2, double sy_2, double sz_2, double x_1, double y_1, double z_1, double x_2, double y_2, double z_2, double scale)
{delta_x = -px_1*scale + px_2*scale - x_1*(pow(sx_1, 2)*(1.0 - cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))))/(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)) + cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)))) + x_2*(pow(sx_2, 2)*(1.0 - cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))))/(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)) + cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)))) - y_1*(sx_1*sy_1*(1.0 - cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))))/(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)) - sz_1*sin(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)))/sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))) + y_2*(sx_2*sy_2*(1.0 - cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))))/(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)) - sz_2*sin(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)))/sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))) - z_1*(sx_1*sz_1*(1.0 - cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))))/(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)) + sy_1*sin(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)))/sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))) + z_2*(sx_2*sz_2*(1.0 - cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))))/(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)) + sy_2*sin(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)))/sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)));
delta_y = -py_1*scale + py_2*scale - x_1*(sx_1*sy_1*(1.0 - cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))))/(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)) + sz_1*sin(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)))/sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))) + x_2*(sx_2*sy_2*(1.0 - cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))))/(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)) + sz_2*sin(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)))/sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))) - y_1*(pow(sy_1, 2)*(1.0 - cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))))/(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)) + cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)))) + y_2*(pow(sy_2, 2)*(1.0 - cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))))/(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)) + cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)))) - z_1*(-sx_1*sin(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)))/sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)) + sy_1*sz_1*(1.0 - cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))))/(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))) + z_2*(-sx_2*sin(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)))/sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)) + sy_2*sz_2*(1.0 - cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))))/(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)));
delta_z = -pz_1*scale + pz_2*scale - x_1*(sx_1*sz_1*(1.0 - cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))))/(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)) - sy_1*sin(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)))/sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))) + x_2*(sx_2*sz_2*(1.0 - cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))))/(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)) - sy_2*sin(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)))/sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))) - y_1*(sx_1*sin(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)))/sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)) + sy_1*sz_1*(1.0 - cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))))/(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))) + y_2*(sx_2*sin(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)))/sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)) + sy_2*sz_2*(1.0 - cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))))/(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))) - z_1*(pow(sz_1, 2)*(1.0 - cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2))))/(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)) + cos(sqrt(pow(sx_1, 2) + pow(sy_1, 2) + pow(sz_1, 2)))) + z_2*(pow(sz_2, 2)*(1.0 - cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))))/(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2)) + cos(sqrt(pow(sx_2, 2) + pow(sy_2, 2) + pow(sz_2, 2))));
}
inline void point_to_point_vo_scale_rodrigues_wc_jacobian(Eigen::Matrix<double, 3, 1> &j, double px_1, double py_1, double pz_1, double px_2, double py_2, double pz_2)
{j.coeffRef(0,0) = -px_1 + px_2;
j.coeffRef(1,0) = -py_1 + py_2;
j.coeffRef(2,0) = -pz_1 + pz_2;
}